#include <CL/sycl.hpp>
#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <windows.h>

using namespace std;
using namespace sycl;

struct index {
    int len;
    std::vector<unsigned int> arr;
};

index& SVS(int* list, std::vector<index>& idx, int num) {
    index& s = idx[list[0]];
    for (int i = 1; i < num; i++) {
        int count = 0;
        int length = s.len;
        for (int j = 0; j < length; j++) {
            bool isExit = false;
            for (int t = 0; t < idx[list[i]].len; t++) {
                if (s.arr[count] == idx[list[i]].arr[t]) {
                    isExit = true;
                    break;
                }
            }
            if (isExit == false) {
                s.len--;
                s.arr.erase(s.arr.begin()+count);
            }
            else {
                count++;
            }
        }
    }
    return s;
}

vector<unsigned int>& ADP(int* list, vector<index>& idx, int num)
{
    vector<unsigned int> S;
    int s = 1;
    bool found = true;
    vector<index> idx_;
    for (int i = 0; i < num; i++)
    {
        idx_.push_back(idx[list[i]]);
    }
    for (int t = 0; t < idx_[0].len; t++)
    {
        unsigned int e = idx_[0].arr[t];
        while (s != num && found == true)
        {
            for (int i = 0; i < idx_[s].len; i++)
            {
                found = false;
                if (e == idx_[s].arr[i])
                {
                    found = true;
                    break;
                }
            }
            s = s + 1;
        }
        if (s == num && found == true)
            S.push_back(e);
    }
    return S;
}

int main()
{
    fstream file;
    file.open("D://ExpIndex_Query//ExpIndex", ios::binary | ios::in);
    if (!file.is_open()) {
        cout << "No file";
        return 0;
    }
    cout << "infile" << endl;
    vector<index> idx;
    for (int i = 0; i < 2000; i++) {
        index temp;
        file.read((char*)&temp.len, sizeof(temp.len));
        for (int j = 0; j < (temp.len); j++) {
            unsigned int binary_temp;
            file.read((char*)&binary_temp, sizeof(binary_temp));
            temp.arr.push_back(binary_temp);
        }
        idx.push_back(temp);
    }
    file.close();

    file.open("D://ExpIndex_Query//ExpQuery", ios::in);
    if (!file.is_open()) {
        cout << "No file";
        return 0;
    }
    cout << "infile" << endl;
    int query[1000][5] = {0};
    string line;
    int count = 0;
    while (getline(file, line)) {
        stringstream ss;
        ss << line;
        int a = 0;
        while (!ss.eof()) {
            int temp;
            ss >> temp;
            query[count][a] = temp;
            a++;
        }
        count++;
    }

    file.close();

    const int num_queries = 1000;
    const int num_lists = 5;
    const int num_indices = 2000;

    // Create a queue with default device
    queue q;

    // Create buffers for the data
    buffer<index, 1> idx_buf(idx.data(), range<1>(num_indices));
    buffer<int, 2> query_buf(query, range<2>(num_queries, num_lists));

    // Launch the kernel
    q.submit([&](handler& h) {
        auto idx_acc = idx_buf.get_access<access::mode::read>(h);
        auto query_acc = query_buf.get_access<access::mode::read_write>(h);

        h.parallel_for<class SVS_kernel>(range<1>(num_queries), [=](id<1> idx) {
            int* list = &query_acc[idx[0]][0];
            int num = 0;
            for (int j = 0; j < num_lists; j++) {
                if (list[j] != 0) {
                    num++;
                }
            }

            index& s = idx_acc[list[0]];
            for (int i = 1; i < num; i++) {
                int count = 0;
                int length = s.len;
                for (int j = 0; j < length; j++) {
                    bool isExit = false;
                    for (int t = 0; t < idx_acc[list[i]].len; t++) {
                        if (s.arr[count] == idx_acc[list[i]].arr[t]) {
                            isExit = true;
                            break;
                        }
                    }
                    if (isExit == false) {
                        s.len--;
                        s.arr.erase(s.arr.begin() + count);
                    }
                    else {
                        count++;
                    }
                }
            }
        });
    });

    // Wait for the kernel to finish
    q.wait();

    return 0;
}