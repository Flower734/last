#include <iostream>
#include <fstream>
#include <vector>
#include <math.h>
#include <time.h>
#include <string>
#include <string.h>
#include <sstream>
#include <algorithm>
#include <pthread.h>
#define MAXSIZE 2000
#define NUM_THREAD 4
using namespace std;
class Hash_List {
public:
	int beg = -1;
	int end = -1;
};

class _index {
public:
	int len = 0;
	vector<unsigned int> arr;
};
vector<_index> idx;
void sorted(int* list, vector<_index>& idx, int num) {
	for (int i = 0; i < num - 1; i++) {
		for (int j = 0; j < num - i - 1; j++) {
			if (idx[list[j]].len > idx[list[j + 1]].len) {
				int tmp = list[j];
				list[j] = list[j + 1];
				list[j + 1] = tmp;
			}
		}
	}
}
_index s;
_index temp;
Hash_List** HL;
pthread_t thread[NUM_THREAD];
_index* s0 = new _index[NUM_THREAD];
struct threadParam_t {
	int t_id;//线程id
	int* num_of_list;//待测的第几组list
	int n;
};
threadParam_t param[NUM_THREAD];
Hash_List** preprocess(vector<_index> idx, Hash_List** HL) {
	//h(x)=[x/2**16];遍历所有idx中的遍历，均给出其哈希表
	unsigned int p = 0;
	for (int i = 0; i < MAXSIZE; i++) {//对每个_index预处理
		for (int j = 0; j < idx[i].len; j++) {
			int a = idx[i].arr[j];
			int b = floor(a / 65536);
			if (HL[i][b].beg == -1) {
				HL[i][b].beg = j;
				HL[i][b].end = j;
			}
			else {
				HL[i][b].end = j;
			}
		}
	}
	return HL;
}
void* threadFunc_hash(void* param){
    threadParam_t* p = (threadParam_t*)param;
	int t_id = p->t_id;
	int* num_of_list = p->num_of_list;
	int n = p->n;
	int start = (s.arr.size() / NUM_THREAD) * t_id;
	int _end;
	if (t_id == NUM_THREAD - 1) {
		_end = s.arr.size();
	}
	else {
		_end = start + (s.arr.size()) / NUM_THREAD;
	}
	s0[t_id].arr.assign(s.arr.begin() + start, s.arr.begin() + _end);
	for (int i = 1; i < n; i++) {//num个列表求交
		int length = s0[t_id].arr.size();
		for (int j = 0; j <length; j++) {//s列表中的各个值比较
			bool isExit = false;
			int a = floor(s0[t_id].arr[j] / 65536);
			int t = HL[num_of_list[i]][a].beg;
			int t1 = HL[num_of_list[i]][a].end;
			if (t < 0 || t1 < 0) {
				s0[t_id].arr[j]=-1;
				continue;
			}
			else {
				for (t; t <= t1; t++) {//第i个列表的各个值与s列表中的第【j]个值比较
					if (s0[t_id].arr[j] == idx[num_of_list[i]].arr[t]) {
						isExit = true;
						break;
					}
				}
				if (isExit == false) {
					s0[t_id].arr[j]=-1;
				}
			}
		}
        vector<unsigned int>::iterator newEnd(remove(s0[t_id].arr.begin(), s0[t_id].arr.end(), -1));
		s0[t_id].arr.erase(newEnd);
	}
	pthread_exit(NULL);
}
_index& Hash_S(int* list, vector<_index>& idx, int num) {//基于哈希表的串行实现

	s = idx[list[0]];
	threadParam_t param[NUM_THREAD];
	for (int t_id = 0; t_id < NUM_THREAD; t_id++) {
		param[t_id].t_id = t_id;
		param[t_id].num_of_list = list;
		param[t_id].n = num;
		pthread_create(&thread[t_id], NULL, threadFunc_hash, &param[t_id]);
	}
	for (int t_id = 0; t_id < NUM_THREAD; t_id++) {
		pthread_join(thread[t_id], NULL);
	}
	s.arr.clear();
	for (int t_id = 0; t_id < NUM_THREAD; t_id++) {
		s.arr.insert(s.arr.end(), s0[t_id].arr.begin(), s0[t_id].arr.end());
	}
	return s;
}
int main() {
	//读取二进制文件
	fstream file;
	file.open("ExpIndex", ios::binary | ios::in);
	if (!file.is_open()) {
		cout << "No file";
		return 0;

	}
	for (int i = 0; i < 2000; i++) {
		_index temp;
		file.read((char*)&temp.len, sizeof(temp.len));
		for (int j = 0; j < (temp.len); j++)
		{
			unsigned int binary_temp;
			file.read((char*)&binary_temp, sizeof(binary_temp));
			temp.arr.push_back(binary_temp);
		}
		idx.push_back(temp);
	}
	file.close();
	/*---------------------------------------------------------------------------------------------------------*/
	file.open("ExpQuery", ios::in);
	int query[1000][5] = { 0 };
	string line;
	int count = 0;
	while (getline(file, line)) {
		stringstream ss; //输入流
		ss << line; //向流中传值
		int a = 0;
		while (!ss.eof()) {
			int temp;
			ss >> temp;
			query[count][a] = temp;
			a++;
		}
		count++;
	}
	/*-----------------------------------------------------------------------------------------------------------*/

	//哈希求交
	clock_t start, end;
	HL = new Hash_List * [MAXSIZE];
	for(int i=0;i<MAXSIZE;i++){
	HL[i]=new Hash_List[65536];
	}
	HL = preprocess(idx, HL);
	start = clock();
	for (int i = 0; i < 5; i++) {
		int num = 0;
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];//例子中的数
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		//-------hash优化版---------

		sorted(list, idx, num);
		s = Hash_S(list, idx, num);

	}
	end = clock();
	cout << "哈希优化消耗的事件：" << end-start << endl;

	//
	//	for (int i = 0; i < MAXSIZE; i++) {
	//		HL[i] = new Hash_List[65536];
	//	}
		//将列表按从小到大顺序排列
		//
	/*	int num = sizeof(list) / sizeof(int);

		s = Hash_S(list,idx,num);
		cout << s.len << endl;*/
		/*for (int i = 0; i < s.len; i++) {
			cout << s.arr[i] << ' ';
		}*/
	return 0;
}
